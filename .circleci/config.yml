version: 2

initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/src/rajansandeep/ci
    sudo chown -R circleci /go
    mkdir -p /go/out/tests
    mkdir -p /go/out/logs
    mkdir -p /home/circleci/logs
    GOROOT=$(go env GOROOT)
    sudo rm -r $(go env GOROOT)
    sudo mkdir $GOROOT
    curl https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz | sudo tar xz -C $GOROOT --strip-components=1

jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /go/src/rajansandeep/ci
    environment:
      K8S_VERSION: v1.14.1
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.1.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - <<: *initWorkingDir
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            # Start a local docker repository
            docker run -d -p 5000:5000 --restart=always --name registry registry:2.6.2
      - run:
          name: setup helm
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION}
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get po --all-namespaces
      - run:
          name: setup coredns for test
          command: |
            # Scale the CoreDNS replicas to 1 for more accuracy.
            kubectl scale -n kube-system deployment/coredns --replicas=1

            # Patch CoreDNS to update deployment.
            kubectl patch deployment coredns -n kube-system -p "$(cat /go/src/rajansandeep/ci/build/kubernetes/coredns_deployment_patch.yaml)"

            # Deploy test objects
            kubectl create -f /go/src/rajansandeep/ci/build/kubernetes/dns-test.yaml

            # Add federation labels to node
            kubectl label nodes minikube failure-domain.beta.kubernetes.io/zone=fdzone
            kubectl label nodes minikube failure-domain.beta.kubernetes.io/region=fdregion

            # Start local proxy (for out-of-cluster tests)
            kubectl proxy --port=8080 2> /dev/null &
            echo -n $! > sudo /var/run/kubectl_proxy.pid
            sleep 3
