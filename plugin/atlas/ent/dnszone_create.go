// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coredns/coredns/plugin/atlas/ent/dnsrr"
	"github.com/coredns/coredns/plugin/atlas/ent/dnszone"
	"github.com/rs/xid"
)

// DNSZoneCreate is the builder for creating a DNSZone entity.
type DNSZoneCreate struct {
	config
	mutation *DNSZoneMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dzc *DNSZoneCreate) SetCreatedAt(t time.Time) *DNSZoneCreate {
	dzc.mutation.SetCreatedAt(t)
	return dzc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableCreatedAt(t *time.Time) *DNSZoneCreate {
	if t != nil {
		dzc.SetCreatedAt(*t)
	}
	return dzc
}

// SetUpdatedAt sets the "updated_at" field.
func (dzc *DNSZoneCreate) SetUpdatedAt(t time.Time) *DNSZoneCreate {
	dzc.mutation.SetUpdatedAt(t)
	return dzc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableUpdatedAt(t *time.Time) *DNSZoneCreate {
	if t != nil {
		dzc.SetUpdatedAt(*t)
	}
	return dzc
}

// SetName sets the "name" field.
func (dzc *DNSZoneCreate) SetName(s string) *DNSZoneCreate {
	dzc.mutation.SetName(s)
	return dzc
}

// SetMname sets the "mname" field.
func (dzc *DNSZoneCreate) SetMname(s string) *DNSZoneCreate {
	dzc.mutation.SetMname(s)
	return dzc
}

// SetRname sets the "rname" field.
func (dzc *DNSZoneCreate) SetRname(s string) *DNSZoneCreate {
	dzc.mutation.SetRname(s)
	return dzc
}

// SetTTL sets the "ttl" field.
func (dzc *DNSZoneCreate) SetTTL(i int32) *DNSZoneCreate {
	dzc.mutation.SetTTL(i)
	return dzc
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableTTL(i *int32) *DNSZoneCreate {
	if i != nil {
		dzc.SetTTL(*i)
	}
	return dzc
}

// SetRefresh sets the "refresh" field.
func (dzc *DNSZoneCreate) SetRefresh(i int32) *DNSZoneCreate {
	dzc.mutation.SetRefresh(i)
	return dzc
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableRefresh(i *int32) *DNSZoneCreate {
	if i != nil {
		dzc.SetRefresh(*i)
	}
	return dzc
}

// SetRetry sets the "retry" field.
func (dzc *DNSZoneCreate) SetRetry(i int32) *DNSZoneCreate {
	dzc.mutation.SetRetry(i)
	return dzc
}

// SetNillableRetry sets the "retry" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableRetry(i *int32) *DNSZoneCreate {
	if i != nil {
		dzc.SetRetry(*i)
	}
	return dzc
}

// SetExpire sets the "expire" field.
func (dzc *DNSZoneCreate) SetExpire(i int32) *DNSZoneCreate {
	dzc.mutation.SetExpire(i)
	return dzc
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableExpire(i *int32) *DNSZoneCreate {
	if i != nil {
		dzc.SetExpire(*i)
	}
	return dzc
}

// SetMinimum sets the "minimum" field.
func (dzc *DNSZoneCreate) SetMinimum(i int32) *DNSZoneCreate {
	dzc.mutation.SetMinimum(i)
	return dzc
}

// SetNillableMinimum sets the "minimum" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableMinimum(i *int32) *DNSZoneCreate {
	if i != nil {
		dzc.SetMinimum(*i)
	}
	return dzc
}

// SetActivated sets the "activated" field.
func (dzc *DNSZoneCreate) SetActivated(b bool) *DNSZoneCreate {
	dzc.mutation.SetActivated(b)
	return dzc
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableActivated(b *bool) *DNSZoneCreate {
	if b != nil {
		dzc.SetActivated(*b)
	}
	return dzc
}

// SetID sets the "id" field.
func (dzc *DNSZoneCreate) SetID(x xid.ID) *DNSZoneCreate {
	dzc.mutation.SetID(x)
	return dzc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dzc *DNSZoneCreate) SetNillableID(x *xid.ID) *DNSZoneCreate {
	if x != nil {
		dzc.SetID(*x)
	}
	return dzc
}

// AddRecordIDs adds the "records" edge to the DnsRR entity by IDs.
func (dzc *DNSZoneCreate) AddRecordIDs(ids ...xid.ID) *DNSZoneCreate {
	dzc.mutation.AddRecordIDs(ids...)
	return dzc
}

// AddRecords adds the "records" edges to the DnsRR entity.
func (dzc *DNSZoneCreate) AddRecords(d ...*DnsRR) *DNSZoneCreate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dzc.AddRecordIDs(ids...)
}

// Mutation returns the DNSZoneMutation object of the builder.
func (dzc *DNSZoneCreate) Mutation() *DNSZoneMutation {
	return dzc.mutation
}

// Save creates the DNSZone in the database.
func (dzc *DNSZoneCreate) Save(ctx context.Context) (*DNSZone, error) {
	dzc.defaults()
	return withHooks[*DNSZone, DNSZoneMutation](ctx, dzc.sqlSave, dzc.mutation, dzc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dzc *DNSZoneCreate) SaveX(ctx context.Context) *DNSZone {
	v, err := dzc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dzc *DNSZoneCreate) Exec(ctx context.Context) error {
	_, err := dzc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dzc *DNSZoneCreate) ExecX(ctx context.Context) {
	if err := dzc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dzc *DNSZoneCreate) defaults() {
	if _, ok := dzc.mutation.CreatedAt(); !ok {
		v := dnszone.DefaultCreatedAt()
		dzc.mutation.SetCreatedAt(v)
	}
	if _, ok := dzc.mutation.UpdatedAt(); !ok {
		v := dnszone.DefaultUpdatedAt()
		dzc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dzc.mutation.TTL(); !ok {
		v := dnszone.DefaultTTL
		dzc.mutation.SetTTL(v)
	}
	if _, ok := dzc.mutation.Refresh(); !ok {
		v := dnszone.DefaultRefresh
		dzc.mutation.SetRefresh(v)
	}
	if _, ok := dzc.mutation.Retry(); !ok {
		v := dnszone.DefaultRetry
		dzc.mutation.SetRetry(v)
	}
	if _, ok := dzc.mutation.Expire(); !ok {
		v := dnszone.DefaultExpire
		dzc.mutation.SetExpire(v)
	}
	if _, ok := dzc.mutation.Minimum(); !ok {
		v := dnszone.DefaultMinimum
		dzc.mutation.SetMinimum(v)
	}
	if _, ok := dzc.mutation.Activated(); !ok {
		v := dnszone.DefaultActivated
		dzc.mutation.SetActivated(v)
	}
	if _, ok := dzc.mutation.ID(); !ok {
		v := dnszone.DefaultID()
		dzc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dzc *DNSZoneCreate) check() error {
	if _, ok := dzc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DNSZone.created_at"`)}
	}
	if _, ok := dzc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DNSZone.updated_at"`)}
	}
	if _, ok := dzc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DNSZone.name"`)}
	}
	if v, ok := dzc.mutation.Name(); ok {
		if err := dnszone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DNSZone.name": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Mname(); !ok {
		return &ValidationError{Name: "mname", err: errors.New(`ent: missing required field "DNSZone.mname"`)}
	}
	if v, ok := dzc.mutation.Mname(); ok {
		if err := dnszone.MnameValidator(v); err != nil {
			return &ValidationError{Name: "mname", err: fmt.Errorf(`ent: validator failed for field "DNSZone.mname": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Rname(); !ok {
		return &ValidationError{Name: "rname", err: errors.New(`ent: missing required field "DNSZone.rname"`)}
	}
	if v, ok := dzc.mutation.Rname(); ok {
		if err := dnszone.RnameValidator(v); err != nil {
			return &ValidationError{Name: "rname", err: fmt.Errorf(`ent: validator failed for field "DNSZone.rname": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.TTL(); !ok {
		return &ValidationError{Name: "ttl", err: errors.New(`ent: missing required field "DNSZone.ttl"`)}
	}
	if v, ok := dzc.mutation.TTL(); ok {
		if err := dnszone.TTLValidator(v); err != nil {
			return &ValidationError{Name: "ttl", err: fmt.Errorf(`ent: validator failed for field "DNSZone.ttl": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Refresh(); !ok {
		return &ValidationError{Name: "refresh", err: errors.New(`ent: missing required field "DNSZone.refresh"`)}
	}
	if v, ok := dzc.mutation.Refresh(); ok {
		if err := dnszone.RefreshValidator(v); err != nil {
			return &ValidationError{Name: "refresh", err: fmt.Errorf(`ent: validator failed for field "DNSZone.refresh": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Retry(); !ok {
		return &ValidationError{Name: "retry", err: errors.New(`ent: missing required field "DNSZone.retry"`)}
	}
	if v, ok := dzc.mutation.Retry(); ok {
		if err := dnszone.RetryValidator(v); err != nil {
			return &ValidationError{Name: "retry", err: fmt.Errorf(`ent: validator failed for field "DNSZone.retry": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Expire(); !ok {
		return &ValidationError{Name: "expire", err: errors.New(`ent: missing required field "DNSZone.expire"`)}
	}
	if v, ok := dzc.mutation.Expire(); ok {
		if err := dnszone.ExpireValidator(v); err != nil {
			return &ValidationError{Name: "expire", err: fmt.Errorf(`ent: validator failed for field "DNSZone.expire": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Minimum(); !ok {
		return &ValidationError{Name: "minimum", err: errors.New(`ent: missing required field "DNSZone.minimum"`)}
	}
	if v, ok := dzc.mutation.Minimum(); ok {
		if err := dnszone.MinimumValidator(v); err != nil {
			return &ValidationError{Name: "minimum", err: fmt.Errorf(`ent: validator failed for field "DNSZone.minimum": %w`, err)}
		}
	}
	if _, ok := dzc.mutation.Activated(); !ok {
		return &ValidationError{Name: "activated", err: errors.New(`ent: missing required field "DNSZone.activated"`)}
	}
	return nil
}

func (dzc *DNSZoneCreate) sqlSave(ctx context.Context) (*DNSZone, error) {
	if err := dzc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dzc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dzc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dzc.mutation.id = &_node.ID
	dzc.mutation.done = true
	return _node, nil
}

func (dzc *DNSZoneCreate) createSpec() (*DNSZone, *sqlgraph.CreateSpec) {
	var (
		_node = &DNSZone{config: dzc.config}
		_spec = sqlgraph.NewCreateSpec(dnszone.Table, sqlgraph.NewFieldSpec(dnszone.FieldID, field.TypeString))
	)
	if id, ok := dzc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dzc.mutation.CreatedAt(); ok {
		_spec.SetField(dnszone.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dzc.mutation.UpdatedAt(); ok {
		_spec.SetField(dnszone.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dzc.mutation.Name(); ok {
		_spec.SetField(dnszone.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dzc.mutation.Mname(); ok {
		_spec.SetField(dnszone.FieldMname, field.TypeString, value)
		_node.Mname = value
	}
	if value, ok := dzc.mutation.Rname(); ok {
		_spec.SetField(dnszone.FieldRname, field.TypeString, value)
		_node.Rname = value
	}
	if value, ok := dzc.mutation.TTL(); ok {
		_spec.SetField(dnszone.FieldTTL, field.TypeInt32, value)
		_node.TTL = value
	}
	if value, ok := dzc.mutation.Refresh(); ok {
		_spec.SetField(dnszone.FieldRefresh, field.TypeInt32, value)
		_node.Refresh = value
	}
	if value, ok := dzc.mutation.Retry(); ok {
		_spec.SetField(dnszone.FieldRetry, field.TypeInt32, value)
		_node.Retry = value
	}
	if value, ok := dzc.mutation.Expire(); ok {
		_spec.SetField(dnszone.FieldExpire, field.TypeInt32, value)
		_node.Expire = value
	}
	if value, ok := dzc.mutation.Minimum(); ok {
		_spec.SetField(dnszone.FieldMinimum, field.TypeInt32, value)
		_node.Minimum = value
	}
	if value, ok := dzc.mutation.Activated(); ok {
		_spec.SetField(dnszone.FieldActivated, field.TypeBool, value)
		_node.Activated = value
	}
	if nodes := dzc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DNSZoneCreateBulk is the builder for creating many DNSZone entities in bulk.
type DNSZoneCreateBulk struct {
	config
	builders []*DNSZoneCreate
}

// Save creates the DNSZone entities in the database.
func (dzcb *DNSZoneCreateBulk) Save(ctx context.Context) ([]*DNSZone, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dzcb.builders))
	nodes := make([]*DNSZone, len(dzcb.builders))
	mutators := make([]Mutator, len(dzcb.builders))
	for i := range dzcb.builders {
		func(i int, root context.Context) {
			builder := dzcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSZoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dzcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dzcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dzcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dzcb *DNSZoneCreateBulk) SaveX(ctx context.Context) []*DNSZone {
	v, err := dzcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dzcb *DNSZoneCreateBulk) Exec(ctx context.Context) error {
	_, err := dzcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dzcb *DNSZoneCreateBulk) ExecX(ctx context.Context) {
	if err := dzcb.Exec(ctx); err != nil {
		panic(err)
	}
}
