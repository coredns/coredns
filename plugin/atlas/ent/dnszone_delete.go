// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coredns/coredns/plugin/atlas/ent/dnszone"
	"github.com/coredns/coredns/plugin/atlas/ent/predicate"
)

// DnsZoneDelete is the builder for deleting a DnsZone entity.
type DnsZoneDelete struct {
	config
	hooks    []Hook
	mutation *DnsZoneMutation
}

// Where appends a list predicates to the DnsZoneDelete builder.
func (dzd *DnsZoneDelete) Where(ps ...predicate.DnsZone) *DnsZoneDelete {
	dzd.mutation.Where(ps...)
	return dzd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dzd *DnsZoneDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, DnsZoneMutation](ctx, dzd.sqlExec, dzd.mutation, dzd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dzd *DnsZoneDelete) ExecX(ctx context.Context) int {
	n, err := dzd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dzd *DnsZoneDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(dnszone.Table, sqlgraph.NewFieldSpec(dnszone.FieldID, field.TypeString))
	if ps := dzd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dzd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dzd.mutation.done = true
	return affected, err
}

// DnsZoneDeleteOne is the builder for deleting a single DnsZone entity.
type DnsZoneDeleteOne struct {
	dzd *DnsZoneDelete
}

// Where appends a list predicates to the DnsZoneDelete builder.
func (dzdo *DnsZoneDeleteOne) Where(ps ...predicate.DnsZone) *DnsZoneDeleteOne {
	dzdo.dzd.mutation.Where(ps...)
	return dzdo
}

// Exec executes the deletion query.
func (dzdo *DnsZoneDeleteOne) Exec(ctx context.Context) error {
	n, err := dzdo.dzd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dnszone.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dzdo *DnsZoneDeleteOne) ExecX(ctx context.Context) {
	if err := dzdo.Exec(ctx); err != nil {
		panic(err)
	}
}
