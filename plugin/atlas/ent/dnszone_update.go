// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coredns/coredns/plugin/atlas/ent/dnsrr"
	"github.com/coredns/coredns/plugin/atlas/ent/dnszone"
	"github.com/coredns/coredns/plugin/atlas/ent/predicate"
	"github.com/rs/xid"
)

// DNSZoneUpdate is the builder for updating DNSZone entities.
type DNSZoneUpdate struct {
	config
	hooks    []Hook
	mutation *DNSZoneMutation
}

// Where appends a list predicates to the DNSZoneUpdate builder.
func (dzu *DNSZoneUpdate) Where(ps ...predicate.DNSZone) *DNSZoneUpdate {
	dzu.mutation.Where(ps...)
	return dzu
}

// SetUpdatedAt sets the "updated_at" field.
func (dzu *DNSZoneUpdate) SetUpdatedAt(t time.Time) *DNSZoneUpdate {
	dzu.mutation.SetUpdatedAt(t)
	return dzu
}

// SetRname sets the "rname" field.
func (dzu *DNSZoneUpdate) SetRname(s string) *DNSZoneUpdate {
	dzu.mutation.SetRname(s)
	return dzu
}

// SetTTL sets the "ttl" field.
func (dzu *DNSZoneUpdate) SetTTL(i int32) *DNSZoneUpdate {
	dzu.mutation.ResetTTL()
	dzu.mutation.SetTTL(i)
	return dzu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableTTL(i *int32) *DNSZoneUpdate {
	if i != nil {
		dzu.SetTTL(*i)
	}
	return dzu
}

// AddTTL adds i to the "ttl" field.
func (dzu *DNSZoneUpdate) AddTTL(i int32) *DNSZoneUpdate {
	dzu.mutation.AddTTL(i)
	return dzu
}

// SetRefresh sets the "refresh" field.
func (dzu *DNSZoneUpdate) SetRefresh(i int32) *DNSZoneUpdate {
	dzu.mutation.ResetRefresh()
	dzu.mutation.SetRefresh(i)
	return dzu
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableRefresh(i *int32) *DNSZoneUpdate {
	if i != nil {
		dzu.SetRefresh(*i)
	}
	return dzu
}

// AddRefresh adds i to the "refresh" field.
func (dzu *DNSZoneUpdate) AddRefresh(i int32) *DNSZoneUpdate {
	dzu.mutation.AddRefresh(i)
	return dzu
}

// SetRetry sets the "retry" field.
func (dzu *DNSZoneUpdate) SetRetry(i int32) *DNSZoneUpdate {
	dzu.mutation.ResetRetry()
	dzu.mutation.SetRetry(i)
	return dzu
}

// SetNillableRetry sets the "retry" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableRetry(i *int32) *DNSZoneUpdate {
	if i != nil {
		dzu.SetRetry(*i)
	}
	return dzu
}

// AddRetry adds i to the "retry" field.
func (dzu *DNSZoneUpdate) AddRetry(i int32) *DNSZoneUpdate {
	dzu.mutation.AddRetry(i)
	return dzu
}

// SetExpire sets the "expire" field.
func (dzu *DNSZoneUpdate) SetExpire(i int32) *DNSZoneUpdate {
	dzu.mutation.ResetExpire()
	dzu.mutation.SetExpire(i)
	return dzu
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableExpire(i *int32) *DNSZoneUpdate {
	if i != nil {
		dzu.SetExpire(*i)
	}
	return dzu
}

// AddExpire adds i to the "expire" field.
func (dzu *DNSZoneUpdate) AddExpire(i int32) *DNSZoneUpdate {
	dzu.mutation.AddExpire(i)
	return dzu
}

// SetMinimum sets the "minimum" field.
func (dzu *DNSZoneUpdate) SetMinimum(i int32) *DNSZoneUpdate {
	dzu.mutation.ResetMinimum()
	dzu.mutation.SetMinimum(i)
	return dzu
}

// SetNillableMinimum sets the "minimum" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableMinimum(i *int32) *DNSZoneUpdate {
	if i != nil {
		dzu.SetMinimum(*i)
	}
	return dzu
}

// AddMinimum adds i to the "minimum" field.
func (dzu *DNSZoneUpdate) AddMinimum(i int32) *DNSZoneUpdate {
	dzu.mutation.AddMinimum(i)
	return dzu
}

// SetActivated sets the "activated" field.
func (dzu *DNSZoneUpdate) SetActivated(b bool) *DNSZoneUpdate {
	dzu.mutation.SetActivated(b)
	return dzu
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (dzu *DNSZoneUpdate) SetNillableActivated(b *bool) *DNSZoneUpdate {
	if b != nil {
		dzu.SetActivated(*b)
	}
	return dzu
}

// AddRecordIDs adds the "records" edge to the DnsRR entity by IDs.
func (dzu *DNSZoneUpdate) AddRecordIDs(ids ...xid.ID) *DNSZoneUpdate {
	dzu.mutation.AddRecordIDs(ids...)
	return dzu
}

// AddRecords adds the "records" edges to the DnsRR entity.
func (dzu *DNSZoneUpdate) AddRecords(d ...*DnsRR) *DNSZoneUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dzu.AddRecordIDs(ids...)
}

// Mutation returns the DNSZoneMutation object of the builder.
func (dzu *DNSZoneUpdate) Mutation() *DNSZoneMutation {
	return dzu.mutation
}

// ClearRecords clears all "records" edges to the DnsRR entity.
func (dzu *DNSZoneUpdate) ClearRecords() *DNSZoneUpdate {
	dzu.mutation.ClearRecords()
	return dzu
}

// RemoveRecordIDs removes the "records" edge to DnsRR entities by IDs.
func (dzu *DNSZoneUpdate) RemoveRecordIDs(ids ...xid.ID) *DNSZoneUpdate {
	dzu.mutation.RemoveRecordIDs(ids...)
	return dzu
}

// RemoveRecords removes "records" edges to DnsRR entities.
func (dzu *DNSZoneUpdate) RemoveRecords(d ...*DnsRR) *DNSZoneUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dzu.RemoveRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dzu *DNSZoneUpdate) Save(ctx context.Context) (int, error) {
	dzu.defaults()
	return withHooks[int, DNSZoneMutation](ctx, dzu.sqlSave, dzu.mutation, dzu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dzu *DNSZoneUpdate) SaveX(ctx context.Context) int {
	affected, err := dzu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dzu *DNSZoneUpdate) Exec(ctx context.Context) error {
	_, err := dzu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dzu *DNSZoneUpdate) ExecX(ctx context.Context) {
	if err := dzu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dzu *DNSZoneUpdate) defaults() {
	if _, ok := dzu.mutation.UpdatedAt(); !ok {
		v := dnszone.UpdateDefaultUpdatedAt()
		dzu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dzu *DNSZoneUpdate) check() error {
	if v, ok := dzu.mutation.Rname(); ok {
		if err := dnszone.RnameValidator(v); err != nil {
			return &ValidationError{Name: "rname", err: fmt.Errorf(`ent: validator failed for field "DNSZone.rname": %w`, err)}
		}
	}
	if v, ok := dzu.mutation.TTL(); ok {
		if err := dnszone.TTLValidator(v); err != nil {
			return &ValidationError{Name: "ttl", err: fmt.Errorf(`ent: validator failed for field "DNSZone.ttl": %w`, err)}
		}
	}
	if v, ok := dzu.mutation.Refresh(); ok {
		if err := dnszone.RefreshValidator(v); err != nil {
			return &ValidationError{Name: "refresh", err: fmt.Errorf(`ent: validator failed for field "DNSZone.refresh": %w`, err)}
		}
	}
	if v, ok := dzu.mutation.Retry(); ok {
		if err := dnszone.RetryValidator(v); err != nil {
			return &ValidationError{Name: "retry", err: fmt.Errorf(`ent: validator failed for field "DNSZone.retry": %w`, err)}
		}
	}
	if v, ok := dzu.mutation.Expire(); ok {
		if err := dnszone.ExpireValidator(v); err != nil {
			return &ValidationError{Name: "expire", err: fmt.Errorf(`ent: validator failed for field "DNSZone.expire": %w`, err)}
		}
	}
	if v, ok := dzu.mutation.Minimum(); ok {
		if err := dnszone.MinimumValidator(v); err != nil {
			return &ValidationError{Name: "minimum", err: fmt.Errorf(`ent: validator failed for field "DNSZone.minimum": %w`, err)}
		}
	}
	return nil
}

func (dzu *DNSZoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dzu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnszone.Table, dnszone.Columns, sqlgraph.NewFieldSpec(dnszone.FieldID, field.TypeString))
	if ps := dzu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dzu.mutation.UpdatedAt(); ok {
		_spec.SetField(dnszone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dzu.mutation.Rname(); ok {
		_spec.SetField(dnszone.FieldRname, field.TypeString, value)
	}
	if value, ok := dzu.mutation.TTL(); ok {
		_spec.SetField(dnszone.FieldTTL, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.AddedTTL(); ok {
		_spec.AddField(dnszone.FieldTTL, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.Refresh(); ok {
		_spec.SetField(dnszone.FieldRefresh, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.AddedRefresh(); ok {
		_spec.AddField(dnszone.FieldRefresh, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.Retry(); ok {
		_spec.SetField(dnszone.FieldRetry, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.AddedRetry(); ok {
		_spec.AddField(dnszone.FieldRetry, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.Expire(); ok {
		_spec.SetField(dnszone.FieldExpire, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.AddedExpire(); ok {
		_spec.AddField(dnszone.FieldExpire, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.Minimum(); ok {
		_spec.SetField(dnszone.FieldMinimum, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.AddedMinimum(); ok {
		_spec.AddField(dnszone.FieldMinimum, field.TypeInt32, value)
	}
	if value, ok := dzu.mutation.Activated(); ok {
		_spec.SetField(dnszone.FieldActivated, field.TypeBool, value)
	}
	if dzu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dzu.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !dzu.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dzu.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dzu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnszone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dzu.mutation.done = true
	return n, nil
}

// DNSZoneUpdateOne is the builder for updating a single DNSZone entity.
type DNSZoneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DNSZoneMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (dzuo *DNSZoneUpdateOne) SetUpdatedAt(t time.Time) *DNSZoneUpdateOne {
	dzuo.mutation.SetUpdatedAt(t)
	return dzuo
}

// SetRname sets the "rname" field.
func (dzuo *DNSZoneUpdateOne) SetRname(s string) *DNSZoneUpdateOne {
	dzuo.mutation.SetRname(s)
	return dzuo
}

// SetTTL sets the "ttl" field.
func (dzuo *DNSZoneUpdateOne) SetTTL(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.ResetTTL()
	dzuo.mutation.SetTTL(i)
	return dzuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableTTL(i *int32) *DNSZoneUpdateOne {
	if i != nil {
		dzuo.SetTTL(*i)
	}
	return dzuo
}

// AddTTL adds i to the "ttl" field.
func (dzuo *DNSZoneUpdateOne) AddTTL(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.AddTTL(i)
	return dzuo
}

// SetRefresh sets the "refresh" field.
func (dzuo *DNSZoneUpdateOne) SetRefresh(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.ResetRefresh()
	dzuo.mutation.SetRefresh(i)
	return dzuo
}

// SetNillableRefresh sets the "refresh" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableRefresh(i *int32) *DNSZoneUpdateOne {
	if i != nil {
		dzuo.SetRefresh(*i)
	}
	return dzuo
}

// AddRefresh adds i to the "refresh" field.
func (dzuo *DNSZoneUpdateOne) AddRefresh(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.AddRefresh(i)
	return dzuo
}

// SetRetry sets the "retry" field.
func (dzuo *DNSZoneUpdateOne) SetRetry(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.ResetRetry()
	dzuo.mutation.SetRetry(i)
	return dzuo
}

// SetNillableRetry sets the "retry" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableRetry(i *int32) *DNSZoneUpdateOne {
	if i != nil {
		dzuo.SetRetry(*i)
	}
	return dzuo
}

// AddRetry adds i to the "retry" field.
func (dzuo *DNSZoneUpdateOne) AddRetry(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.AddRetry(i)
	return dzuo
}

// SetExpire sets the "expire" field.
func (dzuo *DNSZoneUpdateOne) SetExpire(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.ResetExpire()
	dzuo.mutation.SetExpire(i)
	return dzuo
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableExpire(i *int32) *DNSZoneUpdateOne {
	if i != nil {
		dzuo.SetExpire(*i)
	}
	return dzuo
}

// AddExpire adds i to the "expire" field.
func (dzuo *DNSZoneUpdateOne) AddExpire(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.AddExpire(i)
	return dzuo
}

// SetMinimum sets the "minimum" field.
func (dzuo *DNSZoneUpdateOne) SetMinimum(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.ResetMinimum()
	dzuo.mutation.SetMinimum(i)
	return dzuo
}

// SetNillableMinimum sets the "minimum" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableMinimum(i *int32) *DNSZoneUpdateOne {
	if i != nil {
		dzuo.SetMinimum(*i)
	}
	return dzuo
}

// AddMinimum adds i to the "minimum" field.
func (dzuo *DNSZoneUpdateOne) AddMinimum(i int32) *DNSZoneUpdateOne {
	dzuo.mutation.AddMinimum(i)
	return dzuo
}

// SetActivated sets the "activated" field.
func (dzuo *DNSZoneUpdateOne) SetActivated(b bool) *DNSZoneUpdateOne {
	dzuo.mutation.SetActivated(b)
	return dzuo
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (dzuo *DNSZoneUpdateOne) SetNillableActivated(b *bool) *DNSZoneUpdateOne {
	if b != nil {
		dzuo.SetActivated(*b)
	}
	return dzuo
}

// AddRecordIDs adds the "records" edge to the DnsRR entity by IDs.
func (dzuo *DNSZoneUpdateOne) AddRecordIDs(ids ...xid.ID) *DNSZoneUpdateOne {
	dzuo.mutation.AddRecordIDs(ids...)
	return dzuo
}

// AddRecords adds the "records" edges to the DnsRR entity.
func (dzuo *DNSZoneUpdateOne) AddRecords(d ...*DnsRR) *DNSZoneUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dzuo.AddRecordIDs(ids...)
}

// Mutation returns the DNSZoneMutation object of the builder.
func (dzuo *DNSZoneUpdateOne) Mutation() *DNSZoneMutation {
	return dzuo.mutation
}

// ClearRecords clears all "records" edges to the DnsRR entity.
func (dzuo *DNSZoneUpdateOne) ClearRecords() *DNSZoneUpdateOne {
	dzuo.mutation.ClearRecords()
	return dzuo
}

// RemoveRecordIDs removes the "records" edge to DnsRR entities by IDs.
func (dzuo *DNSZoneUpdateOne) RemoveRecordIDs(ids ...xid.ID) *DNSZoneUpdateOne {
	dzuo.mutation.RemoveRecordIDs(ids...)
	return dzuo
}

// RemoveRecords removes "records" edges to DnsRR entities.
func (dzuo *DNSZoneUpdateOne) RemoveRecords(d ...*DnsRR) *DNSZoneUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dzuo.RemoveRecordIDs(ids...)
}

// Where appends a list predicates to the DNSZoneUpdate builder.
func (dzuo *DNSZoneUpdateOne) Where(ps ...predicate.DNSZone) *DNSZoneUpdateOne {
	dzuo.mutation.Where(ps...)
	return dzuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dzuo *DNSZoneUpdateOne) Select(field string, fields ...string) *DNSZoneUpdateOne {
	dzuo.fields = append([]string{field}, fields...)
	return dzuo
}

// Save executes the query and returns the updated DNSZone entity.
func (dzuo *DNSZoneUpdateOne) Save(ctx context.Context) (*DNSZone, error) {
	dzuo.defaults()
	return withHooks[*DNSZone, DNSZoneMutation](ctx, dzuo.sqlSave, dzuo.mutation, dzuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dzuo *DNSZoneUpdateOne) SaveX(ctx context.Context) *DNSZone {
	node, err := dzuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dzuo *DNSZoneUpdateOne) Exec(ctx context.Context) error {
	_, err := dzuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dzuo *DNSZoneUpdateOne) ExecX(ctx context.Context) {
	if err := dzuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dzuo *DNSZoneUpdateOne) defaults() {
	if _, ok := dzuo.mutation.UpdatedAt(); !ok {
		v := dnszone.UpdateDefaultUpdatedAt()
		dzuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dzuo *DNSZoneUpdateOne) check() error {
	if v, ok := dzuo.mutation.Rname(); ok {
		if err := dnszone.RnameValidator(v); err != nil {
			return &ValidationError{Name: "rname", err: fmt.Errorf(`ent: validator failed for field "DNSZone.rname": %w`, err)}
		}
	}
	if v, ok := dzuo.mutation.TTL(); ok {
		if err := dnszone.TTLValidator(v); err != nil {
			return &ValidationError{Name: "ttl", err: fmt.Errorf(`ent: validator failed for field "DNSZone.ttl": %w`, err)}
		}
	}
	if v, ok := dzuo.mutation.Refresh(); ok {
		if err := dnszone.RefreshValidator(v); err != nil {
			return &ValidationError{Name: "refresh", err: fmt.Errorf(`ent: validator failed for field "DNSZone.refresh": %w`, err)}
		}
	}
	if v, ok := dzuo.mutation.Retry(); ok {
		if err := dnszone.RetryValidator(v); err != nil {
			return &ValidationError{Name: "retry", err: fmt.Errorf(`ent: validator failed for field "DNSZone.retry": %w`, err)}
		}
	}
	if v, ok := dzuo.mutation.Expire(); ok {
		if err := dnszone.ExpireValidator(v); err != nil {
			return &ValidationError{Name: "expire", err: fmt.Errorf(`ent: validator failed for field "DNSZone.expire": %w`, err)}
		}
	}
	if v, ok := dzuo.mutation.Minimum(); ok {
		if err := dnszone.MinimumValidator(v); err != nil {
			return &ValidationError{Name: "minimum", err: fmt.Errorf(`ent: validator failed for field "DNSZone.minimum": %w`, err)}
		}
	}
	return nil
}

func (dzuo *DNSZoneUpdateOne) sqlSave(ctx context.Context) (_node *DNSZone, err error) {
	if err := dzuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnszone.Table, dnszone.Columns, sqlgraph.NewFieldSpec(dnszone.FieldID, field.TypeString))
	id, ok := dzuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DNSZone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dzuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnszone.FieldID)
		for _, f := range fields {
			if !dnszone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dnszone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dzuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dzuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dnszone.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dzuo.mutation.Rname(); ok {
		_spec.SetField(dnszone.FieldRname, field.TypeString, value)
	}
	if value, ok := dzuo.mutation.TTL(); ok {
		_spec.SetField(dnszone.FieldTTL, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.AddedTTL(); ok {
		_spec.AddField(dnszone.FieldTTL, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.Refresh(); ok {
		_spec.SetField(dnszone.FieldRefresh, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.AddedRefresh(); ok {
		_spec.AddField(dnszone.FieldRefresh, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.Retry(); ok {
		_spec.SetField(dnszone.FieldRetry, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.AddedRetry(); ok {
		_spec.AddField(dnszone.FieldRetry, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.Expire(); ok {
		_spec.SetField(dnszone.FieldExpire, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.AddedExpire(); ok {
		_spec.AddField(dnszone.FieldExpire, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.Minimum(); ok {
		_spec.SetField(dnszone.FieldMinimum, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.AddedMinimum(); ok {
		_spec.AddField(dnszone.FieldMinimum, field.TypeInt32, value)
	}
	if value, ok := dzuo.mutation.Activated(); ok {
		_spec.SetField(dnszone.FieldActivated, field.TypeBool, value)
	}
	if dzuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dzuo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !dzuo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dzuo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnszone.RecordsTable,
			Columns: []string{dnszone.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DNSZone{config: dzuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dzuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnszone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dzuo.mutation.done = true
	return _node, nil
}
