// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coredns/coredns/plugin/atlas/ent/dnsrr"
	"github.com/coredns/coredns/plugin/atlas/ent/predicate"
)

// DnsRRUpdate is the builder for updating DnsRR entities.
type DnsRRUpdate struct {
	config
	hooks    []Hook
	mutation *DnsRRMutation
}

// Where appends a list predicates to the DnsRRUpdate builder.
func (dru *DnsRRUpdate) Where(ps ...predicate.DnsRR) *DnsRRUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// Mutation returns the DnsRRMutation object of the builder.
func (dru *DnsRRUpdate) Mutation() *DnsRRMutation {
	return dru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DnsRRUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DnsRRMutation](ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DnsRRUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DnsRRUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DnsRRUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DnsRRUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsrr.Table, dnsrr.Columns, sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeInt))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DnsRRUpdateOne is the builder for updating a single DnsRR entity.
type DnsRRUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DnsRRMutation
}

// Mutation returns the DnsRRMutation object of the builder.
func (druo *DnsRRUpdateOne) Mutation() *DnsRRMutation {
	return druo.mutation
}

// Where appends a list predicates to the DnsRRUpdate builder.
func (druo *DnsRRUpdateOne) Where(ps ...predicate.DnsRR) *DnsRRUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DnsRRUpdateOne) Select(field string, fields ...string) *DnsRRUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DnsRR entity.
func (druo *DnsRRUpdateOne) Save(ctx context.Context) (*DnsRR, error) {
	return withHooks[*DnsRR, DnsRRMutation](ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DnsRRUpdateOne) SaveX(ctx context.Context) *DnsRR {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DnsRRUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DnsRRUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DnsRRUpdateOne) sqlSave(ctx context.Context) (_node *DnsRR, err error) {
	_spec := sqlgraph.NewUpdateSpec(dnsrr.Table, dnsrr.Columns, sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeInt))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DnsRR.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsrr.FieldID)
		for _, f := range fields {
			if !dnsrr.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dnsrr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &DnsRR{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
