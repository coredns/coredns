// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DNSRrsColumns holds the columns for the "dns_rrs" table.
	DNSRrsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(20)", "postgres": "varchar(20)", "sqlite3": "varchar"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(6)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(6)"}},
		{Name: "name", Type: field.TypeString, Size: 255, SchemaType: map[string]string{"mysql": "varchar(255)", "postgres": "varchar(255)", "sqlite3": "varchar"}},
		{Name: "rrtype", Type: field.TypeUint16},
		{Name: "rrdata", Type: field.TypeString, Size: 2147483647},
		{Name: "class", Type: field.TypeUint16, Default: 1},
		{Name: "ttl", Type: field.TypeUint32, Default: 3600},
		{Name: "activated", Type: field.TypeBool, Default: true},
		{Name: "dns_zone_records", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(20)", "postgres": "varchar(20)", "sqlite3": "varchar"}},
	}
	// DNSRrsTable holds the schema information for the "dns_rrs" table.
	DNSRrsTable = &schema.Table{
		Name:       "dns_rrs",
		Columns:    DNSRrsColumns,
		PrimaryKey: []*schema.Column{DNSRrsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dns_rrs_dns_zones_records",
				Columns:    []*schema.Column{DNSRrsColumns[9]},
				RefColumns: []*schema.Column{DNSZonesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "dnsrr_name_rrtype",
				Unique:  false,
				Columns: []*schema.Column{DNSRrsColumns[3], DNSRrsColumns[4]},
			},
			{
				Name:    "dnsrr_activated",
				Unique:  false,
				Columns: []*schema.Column{DNSRrsColumns[8]},
			},
		},
	}
	// DNSZonesColumns holds the columns for the "dns_zones" table.
	DNSZonesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(20)", "postgres": "varchar(20)", "sqlite3": "varchar"}},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(6)"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime(6)"}},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 255, SchemaType: map[string]string{"mysql": "varchar(255)", "postgres": "varchar(255)", "sqlite3": "varchar"}},
		{Name: "rrtype", Type: field.TypeUint16, Default: 6},
		{Name: "class", Type: field.TypeUint16, Default: 1},
		{Name: "ttl", Type: field.TypeUint32, Default: 3600},
		{Name: "ns", Type: field.TypeString, Size: 255, SchemaType: map[string]string{"mysql": "varchar(255)", "postgres": "varchar(255)", "sqlite3": "varchar"}},
		{Name: "mbox", Type: field.TypeString, Size: 253, SchemaType: map[string]string{"mysql": "varchar(255)", "postgres": "varchar(255)", "sqlite3": "varchar"}},
		{Name: "serial", Type: field.TypeUint32},
		{Name: "refresh", Type: field.TypeUint32, Default: 10800},
		{Name: "retry", Type: field.TypeUint32, Default: 3600},
		{Name: "expire", Type: field.TypeUint32, Default: 604800},
		{Name: "minttl", Type: field.TypeUint32, Default: 3600},
		{Name: "activated", Type: field.TypeBool, Default: true},
	}
	// DNSZonesTable holds the schema information for the "dns_zones" table.
	DNSZonesTable = &schema.Table{
		Name:       "dns_zones",
		Columns:    DNSZonesColumns,
		PrimaryKey: []*schema.Column{DNSZonesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "dnszone_activated",
				Unique:  false,
				Columns: []*schema.Column{DNSZonesColumns[14]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DNSRrsTable,
		DNSZonesTable,
	}
)

func init() {
	DNSRrsTable.ForeignKeys[0].RefTable = DNSZonesTable
}
