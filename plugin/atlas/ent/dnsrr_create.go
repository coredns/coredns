// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/coredns/coredns/plugin/atlas/ent/dnsrr"
	"github.com/coredns/coredns/plugin/atlas/ent/dnszone"
	"github.com/rs/xid"
)

// DnsRRCreate is the builder for creating a DnsRR entity.
type DnsRRCreate struct {
	config
	mutation *DnsRRMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (drc *DnsRRCreate) SetCreatedAt(t time.Time) *DnsRRCreate {
	drc.mutation.SetCreatedAt(t)
	return drc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drc *DnsRRCreate) SetNillableCreatedAt(t *time.Time) *DnsRRCreate {
	if t != nil {
		drc.SetCreatedAt(*t)
	}
	return drc
}

// SetUpdatedAt sets the "updated_at" field.
func (drc *DnsRRCreate) SetUpdatedAt(t time.Time) *DnsRRCreate {
	drc.mutation.SetUpdatedAt(t)
	return drc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drc *DnsRRCreate) SetNillableUpdatedAt(t *time.Time) *DnsRRCreate {
	if t != nil {
		drc.SetUpdatedAt(*t)
	}
	return drc
}

// SetName sets the "name" field.
func (drc *DnsRRCreate) SetName(s string) *DnsRRCreate {
	drc.mutation.SetName(s)
	return drc
}

// SetTTL sets the "ttl" field.
func (drc *DnsRRCreate) SetTTL(i int32) *DnsRRCreate {
	drc.mutation.SetTTL(i)
	return drc
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (drc *DnsRRCreate) SetNillableTTL(i *int32) *DnsRRCreate {
	if i != nil {
		drc.SetTTL(*i)
	}
	return drc
}

// SetActivated sets the "activated" field.
func (drc *DnsRRCreate) SetActivated(b bool) *DnsRRCreate {
	drc.mutation.SetActivated(b)
	return drc
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (drc *DnsRRCreate) SetNillableActivated(b *bool) *DnsRRCreate {
	if b != nil {
		drc.SetActivated(*b)
	}
	return drc
}

// SetID sets the "id" field.
func (drc *DnsRRCreate) SetID(x xid.ID) *DnsRRCreate {
	drc.mutation.SetID(x)
	return drc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drc *DnsRRCreate) SetNillableID(x *xid.ID) *DnsRRCreate {
	if x != nil {
		drc.SetID(*x)
	}
	return drc
}

// SetZoneID sets the "zone" edge to the DNSZone entity by ID.
func (drc *DnsRRCreate) SetZoneID(id xid.ID) *DnsRRCreate {
	drc.mutation.SetZoneID(id)
	return drc
}

// SetZone sets the "zone" edge to the DNSZone entity.
func (drc *DnsRRCreate) SetZone(d *DNSZone) *DnsRRCreate {
	return drc.SetZoneID(d.ID)
}

// Mutation returns the DnsRRMutation object of the builder.
func (drc *DnsRRCreate) Mutation() *DnsRRMutation {
	return drc.mutation
}

// Save creates the DnsRR in the database.
func (drc *DnsRRCreate) Save(ctx context.Context) (*DnsRR, error) {
	drc.defaults()
	return withHooks[*DnsRR, DnsRRMutation](ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DnsRRCreate) SaveX(ctx context.Context) *DnsRR {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DnsRRCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DnsRRCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DnsRRCreate) defaults() {
	if _, ok := drc.mutation.CreatedAt(); !ok {
		v := dnsrr.DefaultCreatedAt()
		drc.mutation.SetCreatedAt(v)
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		v := dnsrr.DefaultUpdatedAt()
		drc.mutation.SetUpdatedAt(v)
	}
	if _, ok := drc.mutation.TTL(); !ok {
		v := dnsrr.DefaultTTL
		drc.mutation.SetTTL(v)
	}
	if _, ok := drc.mutation.Activated(); !ok {
		v := dnsrr.DefaultActivated
		drc.mutation.SetActivated(v)
	}
	if _, ok := drc.mutation.ID(); !ok {
		v := dnsrr.DefaultID()
		drc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DnsRRCreate) check() error {
	if _, ok := drc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DnsRR.created_at"`)}
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DnsRR.updated_at"`)}
	}
	if _, ok := drc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DnsRR.name"`)}
	}
	if v, ok := drc.mutation.Name(); ok {
		if err := dnsrr.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DnsRR.name": %w`, err)}
		}
	}
	if _, ok := drc.mutation.TTL(); !ok {
		return &ValidationError{Name: "ttl", err: errors.New(`ent: missing required field "DnsRR.ttl"`)}
	}
	if v, ok := drc.mutation.TTL(); ok {
		if err := dnsrr.TTLValidator(v); err != nil {
			return &ValidationError{Name: "ttl", err: fmt.Errorf(`ent: validator failed for field "DnsRR.ttl": %w`, err)}
		}
	}
	if _, ok := drc.mutation.Activated(); !ok {
		return &ValidationError{Name: "activated", err: errors.New(`ent: missing required field "DnsRR.activated"`)}
	}
	if _, ok := drc.mutation.ZoneID(); !ok {
		return &ValidationError{Name: "zone", err: errors.New(`ent: missing required edge "DnsRR.zone"`)}
	}
	return nil
}

func (drc *DnsRRCreate) sqlSave(ctx context.Context) (*DnsRR, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DnsRRCreate) createSpec() (*DnsRR, *sqlgraph.CreateSpec) {
	var (
		_node = &DnsRR{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(dnsrr.Table, sqlgraph.NewFieldSpec(dnsrr.FieldID, field.TypeString))
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := drc.mutation.CreatedAt(); ok {
		_spec.SetField(dnsrr.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drc.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsrr.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := drc.mutation.Name(); ok {
		_spec.SetField(dnsrr.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := drc.mutation.TTL(); ok {
		_spec.SetField(dnsrr.FieldTTL, field.TypeInt32, value)
		_node.TTL = value
	}
	if value, ok := drc.mutation.Activated(); ok {
		_spec.SetField(dnsrr.FieldActivated, field.TypeBool, value)
		_node.Activated = value
	}
	if nodes := drc.mutation.ZoneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsrr.ZoneTable,
			Columns: []string{dnsrr.ZoneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnszone.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dns_zone_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DnsRRCreateBulk is the builder for creating many DnsRR entities in bulk.
type DnsRRCreateBulk struct {
	config
	builders []*DnsRRCreate
}

// Save creates the DnsRR entities in the database.
func (drcb *DnsRRCreateBulk) Save(ctx context.Context) ([]*DnsRR, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DnsRR, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DnsRRMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DnsRRCreateBulk) SaveX(ctx context.Context) []*DnsRR {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DnsRRCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DnsRRCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
