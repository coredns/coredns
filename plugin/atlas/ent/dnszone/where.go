// Code generated by ent, DO NOT EDIT.

package dnszone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/coredns/coredns/plugin/atlas/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldName, v))
}

// Mname applies equality check predicate on the "mname" field. It's identical to MnameEQ.
func Mname(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldMname, v))
}

// Rname applies equality check predicate on the "rname" field. It's identical to RnameEQ.
func Rname(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRname, v))
}

// TTL applies equality check predicate on the "ttl" field. It's identical to TTLEQ.
func TTL(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldTTL, v))
}

// Refresh applies equality check predicate on the "refresh" field. It's identical to RefreshEQ.
func Refresh(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRefresh, v))
}

// Retry applies equality check predicate on the "retry" field. It's identical to RetryEQ.
func Retry(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRetry, v))
}

// Expire applies equality check predicate on the "expire" field. It's identical to ExpireEQ.
func Expire(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldExpire, v))
}

// Minimum applies equality check predicate on the "minimum" field. It's identical to MinimumEQ.
func Minimum(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldMinimum, v))
}

// Activated applies equality check predicate on the "activated" field. It's identical to ActivatedEQ.
func Activated(v bool) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldActivated, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContainsFold(FieldName, v))
}

// MnameEQ applies the EQ predicate on the "mname" field.
func MnameEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldMname, v))
}

// MnameNEQ applies the NEQ predicate on the "mname" field.
func MnameNEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldMname, v))
}

// MnameIn applies the In predicate on the "mname" field.
func MnameIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldMname, vs...))
}

// MnameNotIn applies the NotIn predicate on the "mname" field.
func MnameNotIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldMname, vs...))
}

// MnameGT applies the GT predicate on the "mname" field.
func MnameGT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldMname, v))
}

// MnameGTE applies the GTE predicate on the "mname" field.
func MnameGTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldMname, v))
}

// MnameLT applies the LT predicate on the "mname" field.
func MnameLT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldMname, v))
}

// MnameLTE applies the LTE predicate on the "mname" field.
func MnameLTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldMname, v))
}

// MnameContains applies the Contains predicate on the "mname" field.
func MnameContains(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContains(FieldMname, v))
}

// MnameHasPrefix applies the HasPrefix predicate on the "mname" field.
func MnameHasPrefix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasPrefix(FieldMname, v))
}

// MnameHasSuffix applies the HasSuffix predicate on the "mname" field.
func MnameHasSuffix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasSuffix(FieldMname, v))
}

// MnameEqualFold applies the EqualFold predicate on the "mname" field.
func MnameEqualFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEqualFold(FieldMname, v))
}

// MnameContainsFold applies the ContainsFold predicate on the "mname" field.
func MnameContainsFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContainsFold(FieldMname, v))
}

// RnameEQ applies the EQ predicate on the "rname" field.
func RnameEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRname, v))
}

// RnameNEQ applies the NEQ predicate on the "rname" field.
func RnameNEQ(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldRname, v))
}

// RnameIn applies the In predicate on the "rname" field.
func RnameIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldRname, vs...))
}

// RnameNotIn applies the NotIn predicate on the "rname" field.
func RnameNotIn(vs ...string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldRname, vs...))
}

// RnameGT applies the GT predicate on the "rname" field.
func RnameGT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldRname, v))
}

// RnameGTE applies the GTE predicate on the "rname" field.
func RnameGTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldRname, v))
}

// RnameLT applies the LT predicate on the "rname" field.
func RnameLT(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldRname, v))
}

// RnameLTE applies the LTE predicate on the "rname" field.
func RnameLTE(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldRname, v))
}

// RnameContains applies the Contains predicate on the "rname" field.
func RnameContains(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContains(FieldRname, v))
}

// RnameHasPrefix applies the HasPrefix predicate on the "rname" field.
func RnameHasPrefix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasPrefix(FieldRname, v))
}

// RnameHasSuffix applies the HasSuffix predicate on the "rname" field.
func RnameHasSuffix(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldHasSuffix(FieldRname, v))
}

// RnameEqualFold applies the EqualFold predicate on the "rname" field.
func RnameEqualFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEqualFold(FieldRname, v))
}

// RnameContainsFold applies the ContainsFold predicate on the "rname" field.
func RnameContainsFold(v string) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldContainsFold(FieldRname, v))
}

// TTLEQ applies the EQ predicate on the "ttl" field.
func TTLEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldTTL, v))
}

// TTLNEQ applies the NEQ predicate on the "ttl" field.
func TTLNEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldTTL, v))
}

// TTLIn applies the In predicate on the "ttl" field.
func TTLIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldTTL, vs...))
}

// TTLNotIn applies the NotIn predicate on the "ttl" field.
func TTLNotIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldTTL, vs...))
}

// TTLGT applies the GT predicate on the "ttl" field.
func TTLGT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldTTL, v))
}

// TTLGTE applies the GTE predicate on the "ttl" field.
func TTLGTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldTTL, v))
}

// TTLLT applies the LT predicate on the "ttl" field.
func TTLLT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldTTL, v))
}

// TTLLTE applies the LTE predicate on the "ttl" field.
func TTLLTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldTTL, v))
}

// RefreshEQ applies the EQ predicate on the "refresh" field.
func RefreshEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRefresh, v))
}

// RefreshNEQ applies the NEQ predicate on the "refresh" field.
func RefreshNEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldRefresh, v))
}

// RefreshIn applies the In predicate on the "refresh" field.
func RefreshIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldRefresh, vs...))
}

// RefreshNotIn applies the NotIn predicate on the "refresh" field.
func RefreshNotIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldRefresh, vs...))
}

// RefreshGT applies the GT predicate on the "refresh" field.
func RefreshGT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldRefresh, v))
}

// RefreshGTE applies the GTE predicate on the "refresh" field.
func RefreshGTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldRefresh, v))
}

// RefreshLT applies the LT predicate on the "refresh" field.
func RefreshLT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldRefresh, v))
}

// RefreshLTE applies the LTE predicate on the "refresh" field.
func RefreshLTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldRefresh, v))
}

// RetryEQ applies the EQ predicate on the "retry" field.
func RetryEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldRetry, v))
}

// RetryNEQ applies the NEQ predicate on the "retry" field.
func RetryNEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldRetry, v))
}

// RetryIn applies the In predicate on the "retry" field.
func RetryIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldRetry, vs...))
}

// RetryNotIn applies the NotIn predicate on the "retry" field.
func RetryNotIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldRetry, vs...))
}

// RetryGT applies the GT predicate on the "retry" field.
func RetryGT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldRetry, v))
}

// RetryGTE applies the GTE predicate on the "retry" field.
func RetryGTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldRetry, v))
}

// RetryLT applies the LT predicate on the "retry" field.
func RetryLT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldRetry, v))
}

// RetryLTE applies the LTE predicate on the "retry" field.
func RetryLTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldRetry, v))
}

// ExpireEQ applies the EQ predicate on the "expire" field.
func ExpireEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldExpire, v))
}

// ExpireNEQ applies the NEQ predicate on the "expire" field.
func ExpireNEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldExpire, v))
}

// ExpireIn applies the In predicate on the "expire" field.
func ExpireIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldExpire, vs...))
}

// ExpireNotIn applies the NotIn predicate on the "expire" field.
func ExpireNotIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldExpire, vs...))
}

// ExpireGT applies the GT predicate on the "expire" field.
func ExpireGT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldExpire, v))
}

// ExpireGTE applies the GTE predicate on the "expire" field.
func ExpireGTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldExpire, v))
}

// ExpireLT applies the LT predicate on the "expire" field.
func ExpireLT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldExpire, v))
}

// ExpireLTE applies the LTE predicate on the "expire" field.
func ExpireLTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldExpire, v))
}

// MinimumEQ applies the EQ predicate on the "minimum" field.
func MinimumEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldMinimum, v))
}

// MinimumNEQ applies the NEQ predicate on the "minimum" field.
func MinimumNEQ(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldMinimum, v))
}

// MinimumIn applies the In predicate on the "minimum" field.
func MinimumIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldIn(FieldMinimum, vs...))
}

// MinimumNotIn applies the NotIn predicate on the "minimum" field.
func MinimumNotIn(vs ...int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNotIn(FieldMinimum, vs...))
}

// MinimumGT applies the GT predicate on the "minimum" field.
func MinimumGT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGT(FieldMinimum, v))
}

// MinimumGTE applies the GTE predicate on the "minimum" field.
func MinimumGTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldGTE(FieldMinimum, v))
}

// MinimumLT applies the LT predicate on the "minimum" field.
func MinimumLT(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLT(FieldMinimum, v))
}

// MinimumLTE applies the LTE predicate on the "minimum" field.
func MinimumLTE(v int32) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldLTE(FieldMinimum, v))
}

// ActivatedEQ applies the EQ predicate on the "activated" field.
func ActivatedEQ(v bool) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldEQ(FieldActivated, v))
}

// ActivatedNEQ applies the NEQ predicate on the "activated" field.
func ActivatedNEQ(v bool) predicate.DNSZone {
	return predicate.DNSZone(sql.FieldNEQ(FieldActivated, v))
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.DNSZone {
	return predicate.DNSZone(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.DnsRR) predicate.DNSZone {
	return predicate.DNSZone(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecordsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DNSZone) predicate.DNSZone {
	return predicate.DNSZone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DNSZone) predicate.DNSZone {
	return predicate.DNSZone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DNSZone) predicate.DNSZone {
	return predicate.DNSZone(func(s *sql.Selector) {
		p(s.Not())
	})
}
