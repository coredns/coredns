//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"flag"
	"log"
	"os"
	"strings"
	"text/template"
)

var packageHdr = `
// Code generated by "go run marshaller_generate.go"; DO NOT EDIT.

package record

import (
	"encoding/json"
)
`

var marshalFunc = template.Must(template.New("marshalFunc").Parse(`
{{range .}}
// Marshal {{.}} RR and return json string and error if any
func (rec {{.}}) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}
{{end}}`))

func main() {
	typeToGenerate := flag.String("type", "", "type to generate a marshaller")
	flag.Parse()

	if *typeToGenerate == "" {
		log.Panic("unable to generate atlas record marshallers")
	}

	types := strings.Split(*typeToGenerate, ",")

	b := &bytes.Buffer{}
	b.WriteString(packageHdr)

	file, _ := os.Create("rr_types_generated.go")
	defer file.Close()

	if err := marshalFunc.Execute(b, types); err != nil {
		log.Panic(err)
	}

	if _, err := file.Write(b.Bytes()); err != nil {
		log.Panic(err)
	}

}
