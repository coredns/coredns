// Code generated by coredns Atlas plugin; DO NOT EDIT.

package record

import (
	"encoding/json"

	"github.com/miekg/dns"
)

// Marshal CNAME RR and return json string and error if any
func (rec CNAME) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCNAME(rec *dns.CNAME) CNAME {
	return CNAME{
		Target: rec.Target,
	}
}

// Marshal HINFO RR and return json string and error if any
func (rec HINFO) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewHINFO(rec *dns.HINFO) HINFO {
	return HINFO{
		Cpu: rec.Cpu, Os: rec.Os,
	}
}

// Marshal MB RR and return json string and error if any
func (rec MB) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMB(rec *dns.MB) MB {
	return MB{
		Mb: rec.Mb,
	}
}

// Marshal MG RR and return json string and error if any
func (rec MG) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMG(rec *dns.MG) MG {
	return MG{
		Mg: rec.Mg,
	}
}

// Marshal MINFO RR and return json string and error if any
func (rec MINFO) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMINFO(rec *dns.MINFO) MINFO {
	return MINFO{
		Rmail: rec.Rmail, Email: rec.Email,
	}
}

// Marshal MR RR and return json string and error if any
func (rec MR) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMR(rec *dns.MR) MR {
	return MR{
		Mr: rec.Mr,
	}
}

// Marshal MF RR and return json string and error if any
func (rec MF) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMF(rec *dns.MF) MF {
	return MF{
		Mf: rec.Mf,
	}
}

// Marshal MD RR and return json string and error if any
func (rec MD) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMD(rec *dns.MD) MD {
	return MD{
		Md: rec.Md,
	}
}

// Marshal MX RR and return json string and error if any
func (rec MX) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewMX(rec *dns.MX) MX {
	return MX{
		Preference: rec.Preference, Mx: rec.Mx,
	}
}

// Marshal AFSDB RR and return json string and error if any
func (rec AFSDB) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAFSDB(rec *dns.AFSDB) AFSDB {
	return AFSDB{
		Subtype: rec.Subtype, Hostname: rec.Hostname,
	}
}

// Marshal X25 RR and return json string and error if any
func (rec X25) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewX25(rec *dns.X25) X25 {
	return X25{
		PSDNAddress: rec.PSDNAddress,
	}
}

// Marshal RT RR and return json string and error if any
func (rec RT) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewRT(rec *dns.RT) RT {
	return RT{
		Preference: rec.Preference, Host: rec.Host,
	}
}

// Marshal NS RR and return json string and error if any
func (rec NS) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNS(rec *dns.NS) NS {
	return NS{
		Ns: rec.Ns,
	}
}

// Marshal PTR RR and return json string and error if any
func (rec PTR) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewPTR(rec *dns.PTR) PTR {
	return PTR{
		Ptr: rec.Ptr,
	}
}

// Marshal RP RR and return json string and error if any
func (rec RP) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewRP(rec *dns.RP) RP {
	return RP{
		Mbox: rec.Mbox, Txt: rec.Txt,
	}
}

// Marshal TXT RR and return json string and error if any
func (rec TXT) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewTXT(rec *dns.TXT) TXT {
	return TXT{}
}

// Marshal SPF RR and return json string and error if any
func (rec SPF) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewSPF(rec *dns.SPF) SPF {
	return SPF{}
}

// Marshal AVC RR and return json string and error if any
func (rec AVC) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAVC(rec *dns.AVC) AVC {
	return AVC{}
}

// Marshal SRV RR and return json string and error if any
func (rec SRV) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewSRV(rec *dns.SRV) SRV {
	return SRV{
		Priority: rec.Priority, Weight: rec.Weight, Port: rec.Port, Target: rec.Target,
	}
}

// Marshal NAPTR RR and return json string and error if any
func (rec NAPTR) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNAPTR(rec *dns.NAPTR) NAPTR {
	return NAPTR{
		Order: rec.Order, Preference: rec.Preference, Flags: rec.Flags, Service: rec.Service, Regexp: rec.Regexp, Replacement: rec.Replacement,
	}
}

// Marshal CERT RR and return json string and error if any
func (rec CERT) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCERT(rec *dns.CERT) CERT {
	return CERT{
		Type: rec.Type, KeyTag: rec.KeyTag, Algorithm: rec.Algorithm, Certificate: rec.Certificate,
	}
}

// Marshal DNAME RR and return json string and error if any
func (rec DNAME) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewDNAME(rec *dns.DNAME) DNAME {
	return DNAME{
		Target: rec.Target,
	}
}

// Marshal A RR and return json string and error if any
func (rec A) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewA(rec *dns.A) A {
	return A{}
}

// Marshal AAAA RR and return json string and error if any
func (rec AAAA) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAAAA(rec *dns.AAAA) AAAA {
	return AAAA{}
}

// Marshal PX RR and return json string and error if any
func (rec PX) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewPX(rec *dns.PX) PX {
	return PX{
		Preference: rec.Preference, Map822: rec.Map822, Mapx400: rec.Mapx400,
	}
}

// Marshal GPOS RR and return json string and error if any
func (rec GPOS) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewGPOS(rec *dns.GPOS) GPOS {
	return GPOS{
		Longitude: rec.Longitude, Latitude: rec.Latitude, Altitude: rec.Altitude,
	}
}

// Marshal LOC RR and return json string and error if any
func (rec LOC) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewLOC(rec *dns.LOC) LOC {
	return LOC{
		Version: rec.Version, Size: rec.Size, HorizPre: rec.HorizPre, VertPre: rec.VertPre, Latitude: rec.Latitude, Longitude: rec.Longitude, Altitude: rec.Altitude,
	}
}

// Marshal SIG RR and return json string and error if any
func (rec SIG) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewSIG(rec *dns.SIG) SIG {
	return SIG{}
}

// Marshal RRSIG RR and return json string and error if any
func (rec RRSIG) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewRRSIG(rec *dns.RRSIG) RRSIG {
	return RRSIG{
		TypeCovered: rec.TypeCovered, Algorithm: rec.Algorithm, Labels: rec.Labels, OrigTtl: rec.OrigTtl, Expiration: rec.Expiration, Inception: rec.Inception, KeyTag: rec.KeyTag, SignerName: rec.SignerName, Signature: rec.Signature,
	}
}

// Marshal NSEC RR and return json string and error if any
func (rec NSEC) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNSEC(rec *dns.NSEC) NSEC {
	return NSEC{
		NextDomain: rec.NextDomain,
	}
}

// Marshal DLV RR and return json string and error if any
func (rec DLV) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewDLV(rec *dns.DLV) DLV {
	return DLV{}
}

// Marshal CDS RR and return json string and error if any
func (rec CDS) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCDS(rec *dns.CDS) CDS {
	return CDS{}
}

// Marshal DS RR and return json string and error if any
func (rec DS) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewDS(rec *dns.DS) DS {
	return DS{
		KeyTag: rec.KeyTag, Algorithm: rec.Algorithm, DigestType: rec.DigestType, Digest: rec.Digest,
	}
}

// Marshal KX RR and return json string and error if any
func (rec KX) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewKX(rec *dns.KX) KX {
	return KX{
		Preference: rec.Preference, Exchanger: rec.Exchanger,
	}
}

// Marshal TA RR and return json string and error if any
func (rec TA) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewTA(rec *dns.TA) TA {
	return TA{
		KeyTag: rec.KeyTag, Algorithm: rec.Algorithm, DigestType: rec.DigestType, Digest: rec.Digest,
	}
}

// Marshal TALINK RR and return json string and error if any
func (rec TALINK) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewTALINK(rec *dns.TALINK) TALINK {
	return TALINK{
		PreviousName: rec.PreviousName, NextName: rec.NextName,
	}
}

// Marshal SSHFP RR and return json string and error if any
func (rec SSHFP) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewSSHFP(rec *dns.SSHFP) SSHFP {
	return SSHFP{
		Algorithm: rec.Algorithm, Type: rec.Type, FingerPrint: rec.FingerPrint,
	}
}

// Marshal KEY RR and return json string and error if any
func (rec KEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewKEY(rec *dns.KEY) KEY {
	return KEY{}
}

// Marshal CDNSKEY RR and return json string and error if any
func (rec CDNSKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCDNSKEY(rec *dns.CDNSKEY) CDNSKEY {
	return CDNSKEY{}
}

// Marshal DNSKEY RR and return json string and error if any
func (rec DNSKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewDNSKEY(rec *dns.DNSKEY) DNSKEY {
	return DNSKEY{
		Flags: rec.Flags, Protocol: rec.Protocol, Algorithm: rec.Algorithm, PublicKey: rec.PublicKey,
	}
}

// Marshal IPSECKEY RR and return json string and error if any
func (rec IPSECKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewIPSECKEY(rec *dns.IPSECKEY) IPSECKEY {
	return IPSECKEY{
		Precedence: rec.Precedence, GatewayType: rec.GatewayType, Algorithm: rec.Algorithm, GatewayHost: rec.GatewayHost, PublicKey: rec.PublicKey,
	}
}

// Marshal AMTRELAY RR and return json string and error if any
func (rec AMTRELAY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAMTRELAY(rec *dns.AMTRELAY) AMTRELAY {
	return AMTRELAY{
		Precedence: rec.Precedence, GatewayType: rec.GatewayType, GatewayHost: rec.GatewayHost,
	}
}

// Marshal RKEY RR and return json string and error if any
func (rec RKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewRKEY(rec *dns.RKEY) RKEY {
	return RKEY{
		Flags: rec.Flags, Protocol: rec.Protocol, Algorithm: rec.Algorithm, PublicKey: rec.PublicKey,
	}
}

// Marshal NSAPPTR RR and return json string and error if any
func (rec NSAPPTR) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNSAPPTR(rec *dns.NSAPPTR) NSAPPTR {
	return NSAPPTR{
		Ptr: rec.Ptr,
	}
}

// Marshal NSEC3 RR and return json string and error if any
func (rec NSEC3) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNSEC3(rec *dns.NSEC3) NSEC3 {
	return NSEC3{
		Hash: rec.Hash, Flags: rec.Flags, Iterations: rec.Iterations, SaltLength: rec.SaltLength, Salt: rec.Salt, HashLength: rec.HashLength, NextDomain: rec.NextDomain,
	}
}

// Marshal NSEC3PARAM RR and return json string and error if any
func (rec NSEC3PARAM) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNSEC3PARAM(rec *dns.NSEC3PARAM) NSEC3PARAM {
	return NSEC3PARAM{
		Hash: rec.Hash, Flags: rec.Flags, Iterations: rec.Iterations, SaltLength: rec.SaltLength, Salt: rec.Salt,
	}
}

// Marshal TKEY RR and return json string and error if any
func (rec TKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewTKEY(rec *dns.TKEY) TKEY {
	return TKEY{
		Algorithm: rec.Algorithm, Inception: rec.Inception, Expiration: rec.Expiration, Mode: rec.Mode, Error: rec.Error, KeySize: rec.KeySize, Key: rec.Key, OtherLen: rec.OtherLen, OtherData: rec.OtherData,
	}
}

// Marshal RFC3597 RR and return json string and error if any
func (rec RFC3597) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewRFC3597(rec *dns.RFC3597) RFC3597 {
	return RFC3597{
		Rdata: rec.Rdata,
	}
}

// Marshal URI RR and return json string and error if any
func (rec URI) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewURI(rec *dns.URI) URI {
	return URI{
		Priority: rec.Priority, Weight: rec.Weight, Target: rec.Target,
	}
}

// Marshal DHCID RR and return json string and error if any
func (rec DHCID) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewDHCID(rec *dns.DHCID) DHCID {
	return DHCID{
		Digest: rec.Digest,
	}
}

// Marshal TLSA RR and return json string and error if any
func (rec TLSA) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewTLSA(rec *dns.TLSA) TLSA {
	return TLSA{
		Usage: rec.Usage, Selector: rec.Selector, MatchingType: rec.MatchingType, Certificate: rec.Certificate,
	}
}

// Marshal SMIMEA RR and return json string and error if any
func (rec SMIMEA) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewSMIMEA(rec *dns.SMIMEA) SMIMEA {
	return SMIMEA{
		Usage: rec.Usage, Selector: rec.Selector, MatchingType: rec.MatchingType, Certificate: rec.Certificate,
	}
}

// Marshal HIP RR and return json string and error if any
func (rec HIP) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewHIP(rec *dns.HIP) HIP {
	return HIP{
		HitLength: rec.HitLength, PublicKeyAlgorithm: rec.PublicKeyAlgorithm, PublicKeyLength: rec.PublicKeyLength, Hit: rec.Hit, PublicKey: rec.PublicKey,
	}
}

// Marshal NINFO RR and return json string and error if any
func (rec NINFO) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNINFO(rec *dns.NINFO) NINFO {
	return NINFO{}
}

// Marshal NID RR and return json string and error if any
func (rec NID) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNID(rec *dns.NID) NID {
	return NID{
		Preference: rec.Preference, NodeID: rec.NodeID,
	}
}

// Marshal L32 RR and return json string and error if any
func (rec L32) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewL32(rec *dns.L32) L32 {
	return L32{
		Preference: rec.Preference,
	}
}

// Marshal L64 RR and return json string and error if any
func (rec L64) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewL64(rec *dns.L64) L64 {
	return L64{
		Preference: rec.Preference, Locator64: rec.Locator64,
	}
}

// Marshal LP RR and return json string and error if any
func (rec LP) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewLP(rec *dns.LP) LP {
	return LP{
		Preference: rec.Preference, Fqdn: rec.Fqdn,
	}
}

// Marshal EUI48 RR and return json string and error if any
func (rec EUI48) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewEUI48(rec *dns.EUI48) EUI48 {
	return EUI48{
		Address: rec.Address,
	}
}

// Marshal EUI64 RR and return json string and error if any
func (rec EUI64) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewEUI64(rec *dns.EUI64) EUI64 {
	return EUI64{
		Address: rec.Address,
	}
}

// Marshal CAA RR and return json string and error if any
func (rec CAA) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCAA(rec *dns.CAA) CAA {
	return CAA{
		Flag: rec.Flag, Tag: rec.Tag, Value: rec.Value,
	}
}

// Marshal EID RR and return json string and error if any
func (rec EID) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewEID(rec *dns.EID) EID {
	return EID{
		Endpoint: rec.Endpoint,
	}
}

// Marshal NIMLOC RR and return json string and error if any
func (rec NIMLOC) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewNIMLOC(rec *dns.NIMLOC) NIMLOC {
	return NIMLOC{
		Locator: rec.Locator,
	}
}

// Marshal OPENPGPKEY RR and return json string and error if any
func (rec OPENPGPKEY) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewOPENPGPKEY(rec *dns.OPENPGPKEY) OPENPGPKEY {
	return OPENPGPKEY{
		PublicKey: rec.PublicKey,
	}
}

// Marshal CSYNC RR and return json string and error if any
func (rec CSYNC) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewCSYNC(rec *dns.CSYNC) CSYNC {
	return CSYNC{
		Serial: rec.Serial, Flags: rec.Flags,
	}
}

// Marshal ZONEMD RR and return json string and error if any
func (rec ZONEMD) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewZONEMD(rec *dns.ZONEMD) ZONEMD {
	return ZONEMD{
		Serial: rec.Serial, Scheme: rec.Scheme, Hash: rec.Hash, Digest: rec.Digest,
	}
}

// Marshal APL RR and return json string and error if any
func (rec APL) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAPL(rec *dns.APL) APL {
	return APL{}
}

// Marshal APLPrefix RR and return json string and error if any
func (rec APLPrefix) Marshal() (s string, e error) {
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

func NewAPLPrefix(rec *dns.APLPrefix) APLPrefix {
	return APLPrefix{
		Negation: rec.Negation,
	}
}
