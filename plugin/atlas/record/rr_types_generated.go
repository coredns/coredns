
// Code generated by "go run marshaller_generate.go"; DO NOT EDIT.

package record

import (
	"encoding/json"
)


// Marshal CNAME RR and return json string and error if any
func (rec CNAME) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal HINFO RR and return json string and error if any
func (rec HINFO) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MB RR and return json string and error if any
func (rec MB) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MG RR and return json string and error if any
func (rec MG) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MINFO RR and return json string and error if any
func (rec MINFO) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MR RR and return json string and error if any
func (rec MR) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MF RR and return json string and error if any
func (rec MF) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MD RR and return json string and error if any
func (rec MD) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal MX RR and return json string and error if any
func (rec MX) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal AFSDB RR and return json string and error if any
func (rec AFSDB) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal X25 RR and return json string and error if any
func (rec X25) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal RT RR and return json string and error if any
func (rec RT) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NS RR and return json string and error if any
func (rec NS) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal PTR RR and return json string and error if any
func (rec PTR) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal RP RR and return json string and error if any
func (rec RP) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal TXT RR and return json string and error if any
func (rec TXT) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal SPF RR and return json string and error if any
func (rec SPF) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal AVC RR and return json string and error if any
func (rec AVC) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal SRV RR and return json string and error if any
func (rec SRV) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NAPTR RR and return json string and error if any
func (rec NAPTR) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal CERT RR and return json string and error if any
func (rec CERT) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal DNAME RR and return json string and error if any
func (rec DNAME) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal A RR and return json string and error if any
func (rec A) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal AAAA RR and return json string and error if any
func (rec AAAA) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal PX RR and return json string and error if any
func (rec PX) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal GPOS RR and return json string and error if any
func (rec GPOS) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal LOC RR and return json string and error if any
func (rec LOC) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal SIG RR and return json string and error if any
func (rec SIG) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal RRSIG RR and return json string and error if any
func (rec RRSIG) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NSEC RR and return json string and error if any
func (rec NSEC) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal DLV RR and return json string and error if any
func (rec DLV) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal CDS RR and return json string and error if any
func (rec CDS) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal DS RR and return json string and error if any
func (rec DS) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal KX RR and return json string and error if any
func (rec KX) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal TA RR and return json string and error if any
func (rec TA) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal TALINK RR and return json string and error if any
func (rec TALINK) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal SSHFP RR and return json string and error if any
func (rec SSHFP) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal KEY RR and return json string and error if any
func (rec KEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal CDNSKEY RR and return json string and error if any
func (rec CDNSKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal DNSKEY RR and return json string and error if any
func (rec DNSKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal IPSECKEY RR and return json string and error if any
func (rec IPSECKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal AMTRELAY RR and return json string and error if any
func (rec AMTRELAY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal RKEY RR and return json string and error if any
func (rec RKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NSAPPTR RR and return json string and error if any
func (rec NSAPPTR) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NSEC3 RR and return json string and error if any
func (rec NSEC3) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NSEC3PARAM RR and return json string and error if any
func (rec NSEC3PARAM) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal TKEY RR and return json string and error if any
func (rec TKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal RFC3597 RR and return json string and error if any
func (rec RFC3597) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal URI RR and return json string and error if any
func (rec URI) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal DHCID RR and return json string and error if any
func (rec DHCID) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal TLSA RR and return json string and error if any
func (rec TLSA) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal SMIMEA RR and return json string and error if any
func (rec SMIMEA) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal HIP RR and return json string and error if any
func (rec HIP) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NINFO RR and return json string and error if any
func (rec NINFO) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NID RR and return json string and error if any
func (rec NID) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal L32 RR and return json string and error if any
func (rec L32) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal L64 RR and return json string and error if any
func (rec L64) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal LP RR and return json string and error if any
func (rec LP) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal EUI48 RR and return json string and error if any
func (rec EUI48) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal EUI64 RR and return json string and error if any
func (rec EUI64) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal CAA RR and return json string and error if any
func (rec CAA) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal EID RR and return json string and error if any
func (rec EID) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal NIMLOC RR and return json string and error if any
func (rec NIMLOC) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal OPENPGPKEY RR and return json string and error if any
func (rec OPENPGPKEY) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal CSYNC RR and return json string and error if any
func (rec CSYNC) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal ZONEMD RR and return json string and error if any
func (rec ZONEMD) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal APL RR and return json string and error if any
func (rec APL) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}

// Marshal APLPrefix RR and return json string and error if any
func (rec APLPrefix) Marshal() (s string, e error) { 
	var m []byte
	if m, e = json.Marshal(rec); e != nil {
		return
	}
	return string(m), nil
}
