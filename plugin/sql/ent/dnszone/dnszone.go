// Code generated by ent, DO NOT EDIT.

package dnszone

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the dnszone type in the database.
	Label = "dns_zone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRrtype holds the string denoting the rrtype field in the database.
	FieldRrtype = "rrtype"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldTTL holds the string denoting the ttl field in the database.
	FieldTTL = "ttl"
	// FieldNs holds the string denoting the ns field in the database.
	FieldNs = "ns"
	// FieldMbox holds the string denoting the mbox field in the database.
	FieldMbox = "mbox"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldRefresh holds the string denoting the refresh field in the database.
	FieldRefresh = "refresh"
	// FieldRetry holds the string denoting the retry field in the database.
	FieldRetry = "retry"
	// FieldExpire holds the string denoting the expire field in the database.
	FieldExpire = "expire"
	// FieldMinttl holds the string denoting the minttl field in the database.
	FieldMinttl = "minttl"
	// FieldActivated holds the string denoting the activated field in the database.
	FieldActivated = "activated"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the dnszone in the database.
	Table = "dns_zones"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "dns_rrs"
	// RecordsInverseTable is the table name for the DnsRR entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrr" package.
	RecordsInverseTable = "dns_rrs"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "dns_zone_records"
)

// Columns holds all SQL columns for dnszone fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldRrtype,
	FieldClass,
	FieldTTL,
	FieldNs,
	FieldMbox,
	FieldSerial,
	FieldRefresh,
	FieldRetry,
	FieldExpire,
	FieldMinttl,
	FieldActivated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultRrtype holds the default value on creation for the "rrtype" field.
	DefaultRrtype uint16
	// RrtypeValidator is a validator for the "rrtype" field. It is called by the builders before save.
	RrtypeValidator func(uint16) error
	// DefaultClass holds the default value on creation for the "class" field.
	DefaultClass uint16
	// ClassValidator is a validator for the "class" field. It is called by the builders before save.
	ClassValidator func(uint16) error
	// DefaultTTL holds the default value on creation for the "ttl" field.
	DefaultTTL uint32
	// TTLValidator is a validator for the "ttl" field. It is called by the builders before save.
	TTLValidator func(uint32) error
	// NsValidator is a validator for the "ns" field. It is called by the builders before save.
	NsValidator func(string) error
	// MboxValidator is a validator for the "mbox" field. It is called by the builders before save.
	MboxValidator func(string) error
	// SerialValidator is a validator for the "serial" field. It is called by the builders before save.
	SerialValidator func(uint32) error
	// DefaultRefresh holds the default value on creation for the "refresh" field.
	DefaultRefresh uint32
	// RefreshValidator is a validator for the "refresh" field. It is called by the builders before save.
	RefreshValidator func(uint32) error
	// DefaultRetry holds the default value on creation for the "retry" field.
	DefaultRetry uint32
	// RetryValidator is a validator for the "retry" field. It is called by the builders before save.
	RetryValidator func(uint32) error
	// DefaultExpire holds the default value on creation for the "expire" field.
	DefaultExpire uint32
	// ExpireValidator is a validator for the "expire" field. It is called by the builders before save.
	ExpireValidator func(uint32) error
	// DefaultMinttl holds the default value on creation for the "minttl" field.
	DefaultMinttl uint32
	// MinttlValidator is a validator for the "minttl" field. It is called by the builders before save.
	MinttlValidator func(uint32) error
	// DefaultActivated holds the default value on creation for the "activated" field.
	DefaultActivated bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the DnsZone queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRrtype orders the results by the rrtype field.
func ByRrtype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRrtype, opts...).ToFunc()
}

// ByClass orders the results by the class field.
func ByClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClass, opts...).ToFunc()
}

// ByTTL orders the results by the ttl field.
func ByTTL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTTL, opts...).ToFunc()
}

// ByNs orders the results by the ns field.
func ByNs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNs, opts...).ToFunc()
}

// ByMbox orders the results by the mbox field.
func ByMbox(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMbox, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByRefresh orders the results by the refresh field.
func ByRefresh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefresh, opts...).ToFunc()
}

// ByRetry orders the results by the retry field.
func ByRetry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetry, opts...).ToFunc()
}

// ByExpire orders the results by the expire field.
func ByExpire(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpire, opts...).ToFunc()
}

// ByMinttl orders the results by the minttl field.
func ByMinttl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinttl, opts...).ToFunc()
}

// ByActivated orders the results by the activated field.
func ByActivated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivated, opts...).ToFunc()
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
