// Code generated by ent, DO NOT EDIT.

package dnsrr

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the dnsrr type in the database.
	Label = "dns_rr"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRrtype holds the string denoting the rrtype field in the database.
	FieldRrtype = "rrtype"
	// FieldRrdata holds the string denoting the rrdata field in the database.
	FieldRrdata = "rrdata"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldTTL holds the string denoting the ttl field in the database.
	FieldTTL = "ttl"
	// FieldActivated holds the string denoting the activated field in the database.
	FieldActivated = "activated"
	// EdgeZone holds the string denoting the zone edge name in mutations.
	EdgeZone = "zone"
	// Table holds the table name of the dnsrr in the database.
	Table = "dns_rrs"
	// ZoneTable is the table that holds the zone relation/edge.
	ZoneTable = "dns_rrs"
	// ZoneInverseTable is the table name for the DnsZone entity.
	// It exists in this package in order to avoid circular dependency with the "dnszone" package.
	ZoneInverseTable = "dns_zones"
	// ZoneColumn is the table column denoting the zone relation/edge.
	ZoneColumn = "dns_zone_records"
)

// Columns holds all SQL columns for dnsrr fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldRrtype,
	FieldRrdata,
	FieldClass,
	FieldTTL,
	FieldActivated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dns_rrs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dns_zone_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// RrtypeValidator is a validator for the "rrtype" field. It is called by the builders before save.
	RrtypeValidator func(uint16) error
	// DefaultClass holds the default value on creation for the "class" field.
	DefaultClass uint16
	// ClassValidator is a validator for the "class" field. It is called by the builders before save.
	ClassValidator func(uint16) error
	// DefaultTTL holds the default value on creation for the "ttl" field.
	DefaultTTL uint32
	// TTLValidator is a validator for the "ttl" field. It is called by the builders before save.
	TTLValidator func(uint32) error
	// DefaultActivated holds the default value on creation for the "activated" field.
	DefaultActivated bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the DnsRR queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRrtype orders the results by the rrtype field.
func ByRrtype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRrtype, opts...).ToFunc()
}

// ByRrdata orders the results by the rrdata field.
func ByRrdata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRrdata, opts...).ToFunc()
}

// ByClass orders the results by the class field.
func ByClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClass, opts...).ToFunc()
}

// ByTTL orders the results by the ttl field.
func ByTTL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTTL, opts...).ToFunc()
}

// ByActivated orders the results by the activated field.
func ByActivated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivated, opts...).ToFunc()
}

// ByZoneField orders the results by zone field.
func ByZoneField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newZoneStep(), sql.OrderByField(field, opts...))
	}
}
func newZoneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ZoneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ZoneTable, ZoneColumn),
	)
}
